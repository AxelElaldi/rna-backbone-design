
[project]
name = "rna_backbone_design"
version = "0.0.1"
description = "RNA-FrameFlow: Flow Matching for de novo 3D RNA Backbone Design"
authors = [
    { name = "Rishabh Anand", email = "rishabh.anand@yale.edu"},
]
readme = "README.md"
requires-python = ">= 3.10"
license = { file = "LICENSE" }
keywords = [
    "artificial intelligence",
    "deep learning",
    "RNA design",
]

classifiers=[
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.10",
]

dependencies = [
    "torch>=2.1.2",
    "torchvision",
    "torchaudio",
    "lightning>=2.0.7",
    "hydra_core>=1.3.2",
    "torch_geometric",
    "torch_scatter",
    "torch_cluster",
    "MDAnalysis",
    "MDAnalysisTests",
    "biopython",
    "rdkit",
    "mdtraj",
    "graphein",
    "wandb",
    "hydra_colorlog",
    "rootutils",
    "rich",
    "matplotlib",
    "networkx",
    "gputil",
    "omegaconf",
    "beartype",
    "jaxtyping",
    "dm_tree",
    "tmtools",
    "POT",
    "iminuit",
    "tmscoring",
    "biotite",
    "einops",
    "ml_collections",
]

[project.urls]
Homepage = "https://pypi.org/project/rna-backbone-design/"
Repository = "https://github.com/rish-16/rna-backbone-design"

[project.optional-dependencies]
examples = []
test = [
    "pytest",
    "pytest-shard",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.pytest.ini_options]
pythonpath = [
  "."
]
addopts = [
  "--color=yes",
  "--durations=0",
  "--strict-markers",
  "--doctest-modules",
]
filterwarnings = [
  "ignore::DeprecationWarning",
  "ignore::UserWarning",
]
log_cli = "True"
markers = [
  "slow: slow tests",
]
minversion = "6.0"
testpaths = "tests/"

# Assuming you're developing for Python 3.10
target-version = "py310"

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.wheel]
packages = ["rna_backbone_design"]

[tool.coverage.report]
exclude_lines = [
    "pragma: nocover",
    "raise NotImplementedError",
    "raise NotImplementedError()",
    "if __name__ == .__main__.:",
]
